/**
 * This file contains constants and utilities for the static data loaded
 * from the asset bundle generated by crunch. This file should be used for
 * constants that are specific to the _contents_ of the bundle, while the
 * asset-bundle.ts file should be used for generic loading/caching/diffing
 * of the asset bundle as a whole.
 */
import * as assets from "./asset-bundle";

// v1/champion-summary.json
interface ChampionSummary {
    id: number;
    name: string;
    alias: string; // clean version of the name (Chogath)
}

// v1/summoner-spells.json
interface SummonerSpell {
    id: number;
    name: string;
    description: string;
    gameModes: string[];
    iconPath: string;
}

// v1/perks.json
interface Perk {
    id: number;
    name: string;
    iconPath: string;
}

// v1/perkstyles.json
export interface PerkStyle {
    id: number;
    name: string;
    iconPath: string;
    allowedSubStyles: number[];
    slots: PerkStyleSlot[];
}

export interface PerkStyleSlot {
    perks: number[]; // list of ids of rules in that slot
}

let championSummaries!: ChampionSummary[];
let summonerSpells!: SummonerSpell[];
let perks!: Perk[];
let perkStyles!: PerkStyle[];

const normalize = (path: string) => path.replace("/lol-game-data/assets/", "").toLowerCase();

// icon paths
export const profileIconPath = (id: number) => `v1/profile-icons/${id}.jpg`;
export const championIconPath = (id: number) => `v1/champion-icons/${id}.png`;
export const summonerSpellIconPath = (id: number) => normalize(getSummonerSpell(id)?.iconPath || "");
export const perkIconPath = (id: number) => normalize(getPerk(id)?.iconPath || "");
export const perkStyleIconPath = (id: number) => normalize(getPerkStyle(id)?.iconPath || "");

// assets
export const getSummonerSpell = (id: number) => summonerSpells.find(x => x.id === id)!;
export const getChampionSummary = (id: number) => championSummaries.find(x => x.id === id)!;
export const getPerkStyles = () => perkStyles;
export const getPerkStyle = (id: number) => perkStyles.find(x => x.id === id)!;
export const getPerk = (id: number) => perks.find(x => x.id === id)!;

export async function initialize() {
    [championSummaries, summonerSpells, perks, perkStyles] = await Promise.all([
        assets.getOrDownloadJSON<any>("v1/champion-summary.json"),
        assets.getOrDownloadJSON<any>("v1/summoner-spells.json"),
        assets.getOrDownloadJSON<any>("v1/perks.json"),
        assets.getOrDownloadJSON<any>("v1/perkstyles.json").then(x => x.styles)
    ]);
}
